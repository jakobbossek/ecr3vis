// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cov_c
double cov_c(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _ecr3vis_cov_c(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_c(A, B));
    return rcpp_result_gen;
END_RCPP
}
// os_c
double os_c(NumericMatrix A, NumericVector np, NumericVector ip);
RcppExport SEXP _ecr3vis_os_c(SEXP ASEXP, SEXP npSEXP, SEXP ipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type np(npSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ip(ipSEXP);
    rcpp_result_gen = Rcpp::wrap(os_c(A, np, ip));
    return rcpp_result_gen;
END_RCPP
}
// rse_c
double rse_c(NumericMatrix A, double s);
RcppExport SEXP _ecr3vis_rse_c(SEXP ASEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rse_c(A, s));
    return rcpp_result_gen;
END_RCPP
}
// gd_c
double gd_c(NumericMatrix A, NumericMatrix B, double p, bool modified);
RcppExport SEXP _ecr3vis_gd_c(SEXP ASEXP, SEXP BSEXP, SEXP pSEXP, SEXP modifiedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type modified(modifiedSEXP);
    rcpp_result_gen = Rcpp::wrap(gd_c(A, B, p, modified));
    return rcpp_result_gen;
END_RCPP
}
// gdp_c
double gdp_c(NumericMatrix A, NumericMatrix B, double p, bool modified);
RcppExport SEXP _ecr3vis_gdp_c(SEXP ASEXP, SEXP BSEXP, SEXP pSEXP, SEXP modifiedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type modified(modifiedSEXP);
    rcpp_result_gen = Rcpp::wrap(gdp_c(A, B, p, modified));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP dominated_c(SEXP);
RcppExport SEXP eps_c(SEXP, SEXP);
RcppExport SEXP hv_c(SEXP, SEXP);
RcppExport SEXP hv_contr_c(SEXP, SEXP);
RcppExport SEXP nds_c(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_ecr3vis_cov_c", (DL_FUNC) &_ecr3vis_cov_c, 2},
    {"_ecr3vis_os_c", (DL_FUNC) &_ecr3vis_os_c, 3},
    {"_ecr3vis_rse_c", (DL_FUNC) &_ecr3vis_rse_c, 2},
    {"_ecr3vis_gd_c", (DL_FUNC) &_ecr3vis_gd_c, 4},
    {"_ecr3vis_gdp_c", (DL_FUNC) &_ecr3vis_gdp_c, 4},
    {"dominated_c",    (DL_FUNC) &dominated_c,    1},
    {"eps_c",          (DL_FUNC) &eps_c,          2},
    {"hv_c",           (DL_FUNC) &hv_c,           2},
    {"hv_contr_c",     (DL_FUNC) &hv_contr_c,     2},
    {"nds_c",          (DL_FUNC) &nds_c,          1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ecr3vis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
